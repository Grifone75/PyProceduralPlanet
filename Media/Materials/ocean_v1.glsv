
			#version 130
			#extension GL_EXT_texture_array : enable
			
						vec3 mod289(vec3 x) {
              return x - floor(x * (1.0 / 289.0)) * 289.0;
            }
            
            vec4 mod289(vec4 x) {
              return x - floor(x * (1.0 / 289.0)) * 289.0;
            }
            
            vec4 permute(vec4 x) {
                 return mod289(((x*34.0)+1.0)*x);
            }
            
            vec4 taylorInvSqrt(vec4 r)
            {
              return 1.79284291400159 - 0.85373472095314 * r;
            }
            
            float snoise(vec3 v)
              { 
              const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
              const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);
            
            // First corner
              vec3 i  = floor(v + dot(v, C.yyy) );
              vec3 x0 =   v - i + dot(i, C.xxx) ;
            
            // Other corners
              vec3 g = step(x0.yzx, x0.xyz);
              vec3 l = 1.0 - g;
              vec3 i1 = min( g.xyz, l.zxy );
              vec3 i2 = max( g.xyz, l.zxy );
            
              //   x0 = x0 - 0.0 + 0.0 * C.xxx;
              //   x1 = x0 - i1  + 1.0 * C.xxx;
              //   x2 = x0 - i2  + 2.0 * C.xxx;
              //   x3 = x0 - 1.0 + 3.0 * C.xxx;
              vec3 x1 = x0 - i1 + C.xxx;
              vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
              vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y
            
            // Permutations
              i = mod289(i); 
              vec4 p = permute( permute( permute( 
                         i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
                       + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
                       + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
            
            // Gradients: 7x7 points over a square, mapped onto an octahedron.
            // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
              float n_ = 0.142857142857; // 1.0/7.0
              vec3  ns = n_ * D.wyz - D.xzx;
            
              vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)
            
              vec4 x_ = floor(j * ns.z);
              vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)
            
              vec4 x = x_ *ns.x + ns.yyyy;
              vec4 y = y_ *ns.x + ns.yyyy;
              vec4 h = 1.0 - abs(x) - abs(y);
            
              vec4 b0 = vec4( x.xy, y.xy );
              vec4 b1 = vec4( x.zw, y.zw );
            
              //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
              //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
              vec4 s0 = floor(b0)*2.0 + 1.0;
              vec4 s1 = floor(b1)*2.0 + 1.0;
              vec4 sh = -step(h, vec4(0.0));
            
              vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
              vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
            
              vec3 p0 = vec3(a0.xy,h.x);
              vec3 p1 = vec3(a0.zw,h.y);
              vec3 p2 = vec3(a1.xy,h.z);
              vec3 p3 = vec3(a1.zw,h.w);
            
            //Normalise gradients
              vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
              p0 *= norm.x;
              p1 *= norm.y;
              p2 *= norm.z;
              p3 *= norm.w;
            
            // Mix final noise value
              vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
              m = m * m;
              return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                            dot(p2,x2), dot(p3,x3) ) );
              }
			
              
            vec3 cube2sphere(vec3 p)
            {
                float x2,y2,z2,xs,ys,zs;
                x2 = p.x*p.x;
                y2 = p.y*p.y;
                z2 = p.z*p.z;
                // sphericize
                xs = p.x * sqrt(1.0-(y2*0.5)-(z2*0.5)+(y2*z2/3.0));
                ys = p.y * sqrt(1.0-(z2*0.5)-(x2*0.5)+(z2*x2/3.0));
                zs = p.z * sqrt(1.0-(x2*0.5)-(y2*0.5)+(x2*y2/3.0));
                return vec3(xs,ys,zs);
            }
            

            uniform mat4 model_m;
			uniform mat4 view_m;
			uniform mat4 normal_m;
			uniform mat4 proj_m;
			uniform sampler2DArray wavetext;
			uniform sampler2DArray heightmap;
            uniform float planetheight, planetradius,sealevel,camdist,time,skirt_off;
            out vec3 normal_i, posobj;
			out vec4 psv, clipcoord;
            out vec3 texturecoord,t_m,b_m,n_m;
            out vec2 txc2;
			out float polar, seapos, fnodescale,u,v;
			attribute vec3 position;
            attribute vec3 texcoord;
			attribute float nodescale;
			attribute vec2 texcoord2;
			
            void main() 
            {
           
				float uvm = 6000.0;
				float Tk = 0.1;
                float x;
                float y;
                float z;
                float x2,y2,z2;
                float n,n2,n4,n8,pds,pdt;
                vec2 ds,dt;
                vec3 ps,posnew;

	
				float m = clamp(texture2DArray(heightmap,texcoord).w,0.0,1.0);
				float sea_border2 = 1.0;//-smoothstep(sealevel*0.9,sealevel,m);
				
                ps = cube2sphere(position);
   
				polar = (ps.y*ps.y);
				float lon = atan(ps.x,ps.z);
				float lat = ps.z;
				
				u = 0.5+lon/6.28318530717958;
				v = 0.5-asin(ps.y)/3.141592653589793;
				
				float u10 = uvm*u-floor(uvm*u);
				float v10 = uvm*v-floor(uvm*v);
				
				//float n1 = snoise(ps*1000);
				
				float u20 = uvm*5*u-floor(uvm*5*u);
				float v20 = uvm*5*v-floor(uvm*5*v);
				
				float d0 = mod(3*u10+v10,1);
				float ti0 = mod(Tk*time,1);
				vec3 uvcoord0 = vec3(d0,ti0,0);
				
				float d1 = mod(2*u10+v10,1);
				float ti1 = mod(Tk*1.5*time,1);
				vec3 uvcoord1 = vec3(d1,ti1,0);
				
				float d2 = mod(4*u10+v10,1);
				float ti2 = mod(Tk*2.0*time,1);
				vec3 uvcoord2 = vec3(d2,ti2,0);
				
				float d2a = mod(u10+2*v10,1);
				float ti2a = mod(Tk*1.5*time,1);
				vec3 uvcoord2a = vec3(d2a,ti2a,0);

				float d3 = mod(3*u20+v20,1);
				float ti3 = mod(Tk*3.0*time,1);
				vec3 uvcoord3 = vec3(d3,ti3,0);		

				float d4 = mod(u20+v20,1);
				float ti4 = mod(Tk*2.0*time,1);
				vec3 uvcoord4 = vec3(d4,ti4,0);					
				
				normal_i =  normalize(ps);
				
				//calculate tb vectors
				vec3 yplus = vec3(0.0,1.0,0.0);
				vec3 b = yplus - (dot(yplus,normal_i)/dot(normal_i,normal_i)*normal_i);
				vec3 t = cross(b,normal_i);
				
				//calculate tbn matrix 
				vec4 ps4 = vec4(ps,1.0);
				 n_m = normalize(mat3(model_m)*normal_i);
				 t_m = normalize(mat3(model_m)*b);
				 b_m = normalize(mat3(model_m)*t);

				//calculate vertex vector in view space
				psv = (view_m * model_m * ps4);
				
				
				//lightdir.x = dot(temp,t_view);
				//lightdir.y = dot(temp,b_view);
				//lightdir.z = dot(temp,n_view);

	
				seapos = (texture2DArray(wavetext,uvcoord0).z-0.5)*0.04+(texture2DArray(wavetext,uvcoord1).z-0.5)*0.04+(texture2DArray(wavetext,uvcoord2a).z-0.5)*0.04+(texture2DArray(wavetext,uvcoord2).z-0.5)*0.02+(texture2DArray(wavetext,uvcoord3).z-0.5)*0.005+(texture2DArray(wavetext,uvcoord4).z-0.5)*0.005;
				//texture2DArray(wavetext,uvcoord1).z*0.+texture2DArray(wavetext,uvcoord2).z*0;
				
                posnew = ps*(1+planetheight*(sealevel+seapos*sea_border2*0.1)/planetradius)*mix(nodescale,1.0,skirt_off);
                
				posobj = ps;
				fnodescale = nodescale;
                texturecoord = texcoord;
                txc2 = texcoord2;
                clipcoord = proj_m  * view_m * model_m * vec4(posnew,1.0);
                
                clipcoord.z = log2(max(1e-6, 1.0 + clipcoord.w)) * 0.11357410639-1.0;
				clipcoord.z *= clipcoord.w;
				gl_Position = clipcoord;
            }
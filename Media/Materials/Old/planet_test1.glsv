

vec3 mod289(vec3 x) {
              return x - floor(x * (1.0 / 289.0)) * 289.0;
            }
            
            vec4 mod289(vec4 x) {
              return x - floor(x * (1.0 / 289.0)) * 289.0;
            }
            
            vec4 permute(vec4 x) {
                 return mod289(((x*34.0)+1.0)*x);
            }
            
            vec4 taylorInvSqrt(vec4 r)
            {
              return 1.79284291400159 - 0.85373472095314 * r;
            }
            
            float snoise(vec3 v)
              { 
              const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
              const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);
            
            // First corner
              vec3 i  = floor(v + dot(v, C.yyy) );
              vec3 x0 =   v - i + dot(i, C.xxx) ;
            
            // Other corners
              vec3 g = step(x0.yzx, x0.xyz);
              vec3 l = 1.0 - g;
              vec3 i1 = min( g.xyz, l.zxy );
              vec3 i2 = max( g.xyz, l.zxy );
            
              //   x0 = x0 - 0.0 + 0.0 * C.xxx;
              //   x1 = x0 - i1  + 1.0 * C.xxx;
              //   x2 = x0 - i2  + 2.0 * C.xxx;
              //   x3 = x0 - 1.0 + 3.0 * C.xxx;
              vec3 x1 = x0 - i1 + C.xxx;
              vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
              vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y
            
            // Permutations
              i = mod289(i); 
              vec4 p = permute( permute( permute( 
                         i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
                       + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
                       + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
            
            // Gradients: 7x7 points over a square, mapped onto an octahedron.
            // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
              float n_ = 0.142857142857; // 1.0/7.0
              vec3  ns = n_ * D.wyz - D.xzx;
            
              vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)
            
              vec4 x_ = floor(j * ns.z);
              vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)
            
              vec4 x = x_ *ns.x + ns.yyyy;
              vec4 y = y_ *ns.x + ns.yyyy;
              vec4 h = 1.0 - abs(x) - abs(y);
            
              vec4 b0 = vec4( x.xy, y.xy );
              vec4 b1 = vec4( x.zw, y.zw );
            
              //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
              //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
              vec4 s0 = floor(b0)*2.0 + 1.0;
              vec4 s1 = floor(b1)*2.0 + 1.0;
              vec4 sh = -step(h, vec4(0.0));
            
              vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
              vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
            
              vec3 p0 = vec3(a0.xy,h.x);
              vec3 p1 = vec3(a0.zw,h.y);
              vec3 p2 = vec3(a1.xy,h.z);
              vec3 p3 = vec3(a1.zw,h.w);
            
            //Normalise gradients
              vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
              p0 *= norm.x;
              p1 *= norm.y;
              p2 *= norm.z;
              p3 *= norm.w;
            
            // Mix final noise value
              vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
              m = m * m;
              return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                            dot(p2,x2), dot(p3,x3) ) );
              }
              
            vec3 cube2sphere(vec3 p)
            {
                float x2,y2,z2,xs,ys,zs;
                x2 = p.x*p.x;
                y2 = p.y*p.y;
                z2 = p.z*p.z;
                // sphericize
                xs = p.x * sqrt(1.0-(y2*0.5)-(z2*0.5)+(y2*z2/3.0));
                ys = p.y * sqrt(1.0-(z2*0.5)-(x2*0.5)+(z2*x2/3.0));
                zs = p.z * sqrt(1.0-(x2*0.5)-(y2*0.5)+(x2*y2/3.0));
                return vec3(xs,ys,zs);
            }
            
            float surface(vec3 p)
            {
            float noise = 0;
            for (int i=1;i<=6;i++){
                noise += snoise(pow(2,i)*p)/float(i);
            }
            return noise;
            }
            
            varying vec3 normal, halfVector,color3;
            attribute vec3 position;
            attribute vec2 texcoord;
            varying vec2 texturecoord;
            
            void main() 
            {
                //normal = gl_NormalMatrix * gl_Normal;
                //gl_Position = gl_ModelViewProjectionMatrix * vec4(position,1.0);
                float x;
                float y;
                float z;
                float x2,y2,z2;
                float n,n2,n4,n8,nu,nv;
                vec3 pdu,pdv,pdus,pdvs;
                vec3 ps,posnew;
                //create help variables

                x = position[0];
                y = position[1];
                z = position[2];
                
                pdu = position;
                pdv = position;
                bool nok;
                
                nok = true;
            
                if (x == 1 && nok)
                {
                    pdu.y += 0.05;
                    pdv.z += 0.05;
                    nok = false;
                }
                if (x == -1 && nok)
                {
                    pdu.y += 0.05;
                    pdv.z -= 0.05;
                    nok = false;
                }
                if (y == 1 && nok) 
                {
                    pdu.x  -= 0.05;
                    pdv.z  += 0.05;
                    nok = false;
                }
                if (y == -1 && nok) 
                {
                    pdu.x  += 0.05;
                    pdv.z  += 0.05;
                    nok = false;
                }
                if (z == 1 && nok) 
                {
                    pdu.y  += 0.05;
                    pdv.x  -= 0.05;
                    nok = false;
                }
                if (z == -1 && nok) 
                {
                    pdu.y  += 0.05;
                    pdv.x  += 0.05;
                    nok = false;
                }
                
                
                n = surface(position);
                nu = surface(pdu);
                nv = surface(pdv);
              
                if (n < -0.5){
                    color3 = vec3(0.0,0.2,1.0);
                }
                else {
                    color3 = (1-n)*vec3(0.2,0.6,0.1)+(n)*vec3(0.1,0.8,0.0);
                }
                
                ps = cube2sphere(position);
                pdus = cube2sphere(pdu);
                pdvs = cube2sphere(pdv);
                
                //ps = position;
                //pdus = pdu;
                //pdvs = pdv;
                
                
                //calcolate normal based on sphere
                posnew = ps*(1+n/100.0);
                vec3 pnu = pdus*(1+nu/100.0);
                vec3 pnv = pdvs*(1+nv/100.0);
                normal = normalize(gl_NormalMatrix * cross(pnu-posnew,pnv-posnew));
                halfVector = gl_LightSource[0].halfVector.xyz;
                
                texturecoord = texcoord;
                gl_Position = gl_ModelViewProjectionMatrix * vec4(posnew,1.0);
                

            }